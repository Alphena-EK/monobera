fragment ValidatorMinimal on Validator {
  coinbase
  amountStaked
}

query GetUserValidatorInformation($address: Bytes!) {
  userValidatorInformations(where: { user: $address }) {
    id
    amountQueued
    amountDeposited
    latestBlock
    user
    latestBlockTime
    validator {
      ...ValidatorMinimal
    }
  }
}

query GetValidValidator($address: ID!) {
  validator(id: $address) {
    ...ValidatorMinimal
  }
}

query GetAllValidators {
  validators(first: 1000, orderDirection: desc, orderBy: amountStaked) {
    ...ValidatorMinimal
  }
}

fragment ValidatorStakedBgts on ValidatorBGTStaked {
  allTimeBgtStaked
  BGTStaked
  coinbase
  timestamp
}
query GetValidatorBgtStaked($address: Bytes!, $timestamp: Timestamp!) {
  validatorBgtStaked: validatorBGTStakeds(
    interval: day
    where: { coinbase: $address, timestamp_gte: $timestamp }
  ) {
    ...ValidatorStakedBgts
  }
}

fragment BlockRewardStatsByValidator on BlockRewardStatsByValidator {
  timestamp
  # rewardRate
  commissionRate
  validator {
    ...ValidatorMinimal
  }
}

query GetValidatorBlockRewardStats($address: String!, $timestamp: Timestamp!) {
  blockRewardStatsByValidators(
    interval: day
    where: { validator: $address, timestamp_gte: $timestamp }
  ) {
    ...BlockRewardStatsByValidator
  }
}

query GetValidatorTokenRewardUsages($address: String!, $timestamp: Timestamp!) {
  validatorTokenRewardUsages(
    interval: day
    where: { validator: $address, timestamp_gte: $timestamp }
  ) {
    token {
      ...StakingToken
    }
    tokenRewarded
    # usdValueTokenRewarded
    timestamp
    allTimeTokenRewarded
    # allTimeUsdValueTokenRewarded
    id
  }
  validatorUsages(interval: day, where: { validator: $address }, first: 1) {
    # allTimeUsdValueTokenRewarded
    allTimeBgtDirected
  }
}

query GetValidatorBgtBoost($address: String!) {
  userValidatorBoostQueued: userValidatorInformations(
    first: 10
    where: { validator: $address, amountQueued_gt: "0" }
    orderBy: amountQueued
    orderDirection: desc
  ) {
    amountQueued
    user
  }
  userValidatorBoostDeposited: userValidatorInformations(
    first: 10
    where: { validator: $address, amountDeposited_gt: "0" }
    orderBy: amountDeposited
    orderDirection: desc
  ) {
    amountDeposited
    user
  }
}

query GetValidatorBlockStats($address: String = "") {
  blockStatsByValidators(
    interval: hour
    first: 1
    where: { validator: $address }
  ) {
    allTimeblockCount
  }
  blockStats_collection(interval: hour, first: 1) {
    allTimeblockCount
  }
}

query GetAllValidatorBlockCount($timestamp: Timestamp) {
  blockStatsByValidators(
    interval: hour
    first: 1000
    where: { timestamp_gte: $timestamp }
  ) {
    allTimeblockCount
    validator {
      coinbase
    }
    timestamp
  }
}
fragment StakingToken on TokenInformation {
  address
  # beraValue
  decimals
  name
  symbol
  # usdValue
}

fragment VaultMinimal on Vault {
  id
  stakingTokenAmount
  vaultAddress
  # activeIncentivesValueUsd
}

fragment VaultWithStakingToken on Vault {
  ...VaultMinimal
  stakingToken {
    ...StakingToken
  }
}

fragment GlobalInfo on GlobalInfo {
  totalValidators
  totalBGTStaked
  totalBGTQueued
  totalBGTDistributed
  rewardRate
  id
  baseRewardRate
}

fragment GlobalRewardAllocation on GlobalRewardAllocation {
  id
  amount
  receiver
  vault {
    ...VaultMinimal
  }
}

# TODO: we need to figure out what to do when we have 1000+ reward vaults and this query is wrong
query GetGauges {
  globalInfos(first: 1) {
    ...GlobalInfo
  }
  globalRewardAllocations(first: 1) {
    ...GlobalRewardAllocation
  }
  vaults(first: 1000, where: { stakingTokenAmount_gt: "0" }) {
    ...VaultWithStakingToken
  }
}

query GetWeeklyBgtInflation($wbera: ID!) {
  globalIncentivesUsages(interval: day, first: 7) {
    BGTDistributed
  }
  tokenInformation(id: $wbera) {
    ...StakingToken
  }
}

query GetGlobalCuttingBoard {
  globalRewardAllocations {
    ...GlobalRewardAllocation
  }
  globalInfos {
    ...GlobalInfo
  }
}
query GetRewardVault($stakingToken: String) {
  vaults(first: 1, where: { stakingToken: $stakingToken }) {
    ...VaultWithStakingToken
  }
}
