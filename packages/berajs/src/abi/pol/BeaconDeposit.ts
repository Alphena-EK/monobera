export const beacon = [
  { inputs: [], type: "error", name: "AlreadyInitialized" },
  { inputs: [], type: "error", name: "AmountLessThanMinIncentiveRate" },
  { inputs: [], type: "error", name: "CannotRecoverIncentiveToken" },
  { inputs: [], type: "error", name: "CannotRecoverRewardToken" },
  { inputs: [], type: "error", name: "CannotRecoverStakingToken" },
  { inputs: [], type: "error", name: "DepositNotMultipleOfGwei" },
  { inputs: [], type: "error", name: "DepositValueTooHigh" },
  { inputs: [], type: "error", name: "DonateAmountLessThanPayoutAmount" },
  { inputs: [], type: "error", name: "IncentiveRateTooHigh" },
  { inputs: [], type: "error", name: "IndexOutOfRange" },
  { inputs: [], type: "error", name: "InsolventReward" },
  { inputs: [], type: "error", name: "InsufficientDelegateStake" },
  { inputs: [], type: "error", name: "InsufficientDeposit" },
  { inputs: [], type: "error", name: "InsufficientSelfStake" },
  { inputs: [], type: "error", name: "InsufficientStake" },
  { inputs: [], type: "error", name: "InvalidActivateBoostDelay" },
  { inputs: [], type: "error", name: "InvalidBaseRate" },
  { inputs: [], type: "error", name: "InvalidBoostMultiplier" },
  { inputs: [], type: "error", name: "InvalidCredentialsLength" },
  { inputs: [], type: "error", name: "InvalidDropBoostDelay" },
  { inputs: [], type: "error", name: "InvalidMaxIncentiveTokensCount" },
  { inputs: [], type: "error", name: "InvalidMinBoostedRewardRate" },
  { inputs: [], type: "error", name: "InvalidProof" },
  { inputs: [], type: "error", name: "InvalidPubKeyLength" },
  { inputs: [], type: "error", name: "InvalidRewardAllocationWeights" },
  { inputs: [], type: "error", name: "InvalidRewardConvexity" },
  { inputs: [], type: "error", name: "InvalidRewardRate" },
  { inputs: [], type: "error", name: "InvalidRewardVaultAddress" },
  { inputs: [], type: "error", name: "InvalidSignatureLength" },
  { inputs: [], type: "error", name: "InvalidStartBlock" },
  {
    inputs: [],
    type: "error",
    name: "InvalidateDefaultRewardAllocation",
  },
  { inputs: [], type: "error", name: "InvariantCheckFailed" },
  {
    inputs: [],
    type: "error",
    name: "MaxNumWeightsPerRewardAllocationIsZero",
  },
  { inputs: [], type: "error", name: "MaxTokensPerAccountReached" },
  { inputs: [], type: "error", name: "MinIncentiveRateIsZero" },
  { inputs: [], type: "error", name: "NotAContract" },
  { inputs: [], type: "error", name: "NotApprovedSender" },
  { inputs: [], type: "error", name: "NotBGT" },
  { inputs: [], type: "error", name: "NotBlockRewardController" },
  { inputs: [], type: "error", name: "NotDelegate" },
  { inputs: [], type: "error", name: "NotDistributor" },
  { inputs: [], type: "error", name: "NotEnoughBalance" },
  { inputs: [], type: "error", name: "NotEnoughBoostedBalance" },
  { inputs: [], type: "error", name: "NotEnoughTime" },
  { inputs: [], type: "error", name: "NotFactoryVault" },
  { inputs: [], type: "error", name: "NotFeeCollector" },
  { inputs: [], type: "error", name: "NotGovernance" },
  { inputs: [], type: "error", name: "NotIncentiveManager" },
  { inputs: [], type: "error", name: "NotNewOperator" },
  { inputs: [], type: "error", name: "NotOperator" },
  { inputs: [], type: "error", name: "NotRootFollower" },
  { inputs: [], type: "error", name: "NotWhitelistedVault" },
  { inputs: [], type: "error", name: "OperatorAlreadySet" },
  { inputs: [], type: "error", name: "PayoutAmountIsZero" },
  { inputs: [], type: "error", name: "RewardAllocationAlreadyQueued" },
  {
    inputs: [],
    type: "error",
    name: "RewardAllocationBlockDelayTooLarge",
  },
  { inputs: [], type: "error", name: "RewardCycleNotEnded" },
  { inputs: [], type: "error", name: "RewardsDurationIsZero" },
  { inputs: [], type: "error", name: "StakeAmountIsZero" },
  { inputs: [], type: "error", name: "TimestampAlreadyProcessed" },
  {
    inputs: [],
    type: "error",
    name: "TokenAlreadyWhitelistedOrLimitReached",
  },
  { inputs: [], type: "error", name: "TokenNotInList" },
  { inputs: [], type: "error", name: "TokenNotWhitelisted" },
  { inputs: [], type: "error", name: "TooManyWeights" },
  { inputs: [], type: "error", name: "TotalSupplyOverflow" },
  { inputs: [], type: "error", name: "VaultAlreadyExists" },
  { inputs: [], type: "error", name: "WithdrawAmountIsZero" },
  { inputs: [], type: "error", name: "ZeroAddress" },
  { inputs: [], type: "error", name: "ZeroOperatorOnFirstDeposit" },
  { inputs: [], type: "error", name: "ZeroPercentageWeight" },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "pubkey",
        type: "bytes",
        indexed: false,
      },
      {
        internalType: "bytes",
        name: "credentials",
        type: "bytes",
        indexed: false,
      },
      {
        internalType: "uint64",
        name: "amount",
        type: "uint64",
        indexed: false,
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
        indexed: false,
      },
      {
        internalType: "uint64",
        name: "index",
        type: "uint64",
        indexed: false,
      },
    ],
    type: "event",
    name: "Deposit",
    anonymous: false,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "pubkey",
        type: "bytes",
        indexed: true,
      },
    ],
    type: "event",
    name: "OperatorChangeCancelled",
    anonymous: false,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "pubkey",
        type: "bytes",
        indexed: true,
      },
      {
        internalType: "address",
        name: "queuedOperator",
        type: "address",
        indexed: false,
      },
      {
        internalType: "address",
        name: "currentOperator",
        type: "address",
        indexed: false,
      },
      {
        internalType: "uint256",
        name: "queuedTimestamp",
        type: "uint256",
        indexed: false,
      },
    ],
    type: "event",
    name: "OperatorChangeQueued",
    anonymous: false,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "pubkey",
        type: "bytes",
        indexed: true,
      },
      {
        internalType: "address",
        name: "newOperator",
        type: "address",
        indexed: false,
      },
      {
        internalType: "address",
        name: "previousOperator",
        type: "address",
        indexed: false,
      },
    ],
    type: "event",
    name: "OperatorUpdated",
    anonymous: false,
  },
  {
    inputs: [{ internalType: "bytes", name: "pubkey", type: "bytes" }],
    stateMutability: "nonpayable",
    type: "function",
    name: "acceptOperatorChange",
  },
  {
    inputs: [{ internalType: "bytes", name: "pubkey", type: "bytes" }],
    stateMutability: "nonpayable",
    type: "function",
    name: "cancelOperatorChange",
  },
  {
    inputs: [
      { internalType: "bytes", name: "pubkey", type: "bytes" },
      { internalType: "bytes", name: "credentials", type: "bytes" },
      { internalType: "bytes", name: "signature", type: "bytes" },
      { internalType: "address", name: "operator", type: "address" },
    ],
    stateMutability: "payable",
    type: "function",
    name: "deposit",
  },
  {
    inputs: [],
    stateMutability: "view",
    type: "function",
    name: "depositCount",
    outputs: [{ internalType: "uint64", name: "", type: "uint64" }],
  },
  {
    inputs: [{ internalType: "bytes", name: "pubkey", type: "bytes" }],
    stateMutability: "view",
    type: "function",
    name: "getOperator",
    outputs: [{ internalType: "address", name: "", type: "address" }],
  },
  {
    inputs: [{ internalType: "bytes", name: "", type: "bytes" }],
    stateMutability: "view",
    type: "function",
    name: "queuedOperator",
    outputs: [
      { internalType: "uint96", name: "queuedTimestamp", type: "uint96" },
      { internalType: "address", name: "newOperator", type: "address" },
    ],
  },
  {
    inputs: [
      { internalType: "bytes", name: "pubkey", type: "bytes" },
      { internalType: "address", name: "newOperator", type: "address" },
    ],
    stateMutability: "nonpayable",
    type: "function",
    name: "requestOperatorChange",
  },
  {
    inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }],
    stateMutability: "pure",
    type: "function",
    name: "supportsInterface",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
  },
] as const;
